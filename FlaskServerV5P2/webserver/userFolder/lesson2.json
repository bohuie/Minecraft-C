[
    {
        "instructions": "<h1>Fish Pond</h1><br/> <h3>Hi welcome to the Fish Pond lesson.<br/>In this lesson you will use Non-linear Regression algorithm and your robot to build a fish pond!</h3> <br/></br>This is a tutorial page please click NEXT to the next page",
        "starterCode": "print(\"hi\")\r\n\r\n",
        "code": "print(\"hi\")\r\n\r\n",
        "answer": "Hello World!",
        "plotname": "",
        "haveplot": false,
        "nextLocked": false
    },
    {
        "instructions": "<h3>Background:</h3><p>As in lesson 1 where you used linear regression to determine the ideal size of a chicken farm, in this lesson we will use non-linear regression to determine the ideal size of a fish pond. There is a village that needs to build a fish pond. There are now 64 fishes in the village, but no one knows how big the pond should be too keep the fishes happy and thriving. You are the builder of this fish pond, and you need to use your robot to dig and build a proper fish pond for the village. The pond should not be too large (villagers do not want to waste money) or too small (because it will affect the growth of the fishes). Therefore, you need to find a proper size by your self. Here are some data from other fish ponds from other villages, please use this data to predict the size of this pond and help the villagers to build it.</p></br><p>Pond radius size: [2, 12, 5, 19, 6, 8, 9, 10, 11, 14, 4, 15, 16, 7, 17, 18, 20, 26, 13, 21, 22, 1, 23, 24, 3, 25, 27]</p></br><p>N of Fishes: [11, 208, 48, 114, 59, 82, 109, 142, 173, 225, 31, 223, 203, 67, 178, 138, 92, 19, 221, 66, 52, 9, 43, 33, 26, 25, 3]</p></br><p>First, let's understand why we cannot use non-linear regression in this instance. To determine to size of the farm in lesson 1 you could use linear regression because the data formed a straight line on the graph. However, this data does not form a straight line! Non-linear regression can be used for any relationship between numbers that do not show as a staright line on a graph. Click on run to see what a non-linear relationship looks like on a graph.</p></br><p>(this is a tutorial page please click NEXT to the next page) </p>",
        "starterCode": "\r\nprint(\"hello\")\r\npond_size = [2, 12, 5, 19, 6, 8, 9, 10, 11, 14, 4, 15, 16, 7, 17, 18, 20, 26, 13, 21, 22, 1, 23, 24, 3, 25, 27]; \r\nn_fish = [11, 208, 48, 114, 59, 82, 109, 142, 173, 225, 31, 223, 203, 67, 178, 138, 92, 19, 221, 66, 52, 9, 43, 33, 26, 25, 3]; \r\n# As in lesson 1, let's use matplotlib to visualize our data\r\nplt.plot(pond_size,n_fish, \"o\")\r\n#plt.show()\r\n#plt.savefig(\"./userFolder/lessonplot/gpl2-1.png\", bbox_inches='tight')\r\nplt.savefig(\"./static/img/matplot/temp.png\", bbox_inches='tight')\r\nplt.clf()\r\n\r\n# As you can see our data forms a bell curve, we cannot find a straight line to predict our data.\r\n# You might know from math class that the equation of a bell curve is a polynomial of form ax^2+bx+c, let's see how to apply that to our data",
        "code": "\r\nprint(\"hello\")\r\npond_size = [2, 12, 5, 19, 6, 8, 9, 10, 11, 14, 4, 15, 16, 7, 17, 18, 20, 26, 13, 21, 22, 1, 23, 24, 3, 25, 27]; \r\nn_fish = [11, 208, 48, 114, 59, 82, 109, 142, 173, 225, 31, 223, 203, 67, 178, 138, 92, 19, 221, 66, 52, 9, 43, 33, 26, 25, 3]; \r\n# As in lesson 1, let's use matplotlib to visualize our data\r\nplt.plot(pond_size,n_fish, \"o\")\r\n#plt.show()\r\n#plt.savefig(\"./userFolder/lessonplot/gpl2-1.png\", bbox_inches='tight')\r\nplt.savefig(\"./static/img/matplot/temp.png\", bbox_inches='tight')\r\nplt.clf()\r\n\r\n# As you can see our data forms a bell curve, we cannot find a straight line to predict our data.\r\n# You might know from math class that the equation of a bell curve is a polynomial of form ax^2+bx+c, let's see how to apply that to our data",
        "answer": "Hello World",
        "plotname": "L2gp1.png",
        "haveplot": true,
        "nextLocked": false
    },
    {
        "instructions": "Prediction</h3></br><p>Now Let's find the line of best fit, also known as the trend line of the data.</p></br><p>(this is a coding page please run the code before go to next page)</p>",
        "starterCode": "\r\nprint(\"hello\")\r\npond_size = [2, 12, 5, 19, 6, 8, 9, 10, 11, 14, 4, 15, 16, 7, 17, 18, 20, 26, 13, 21, 22, 1, 23, 24, 3, 25, 27]; \r\nn_fish = [11, 208, 48, 114, 59, 82, 109, 142, 173, 225, 31, 223, 203, 67, 178, 138, 92, 19, 221, 66, 52, 9, 43, 33, 26, 25, 3]; \r\n # ax*2 + bx + c, here we use a = 1.22, b = 34, c = 68.2, the equation of our line is 1.22x^2 + 34x + 68.2 \r\n y = [1.22x^2+34x+68.2]\r\n\r\n\r\nplt.plot(size,price,\"o\")\r\n\r\nplt.plot(size,y)\r\n\r\nplt.savefig(\"./static/img/matplot/temp.png\", bbox_inches='tight')\r\nplt.clf()",
        "code": "\r\nprint(\"hello\")\r\npond_size = [2, 12, 5, 19, 6, 8, 9, 10, 11, 14, 4, 15, 16, 7, 17, 18, 20, 26, 13, 21, 22, 1, 23, 24, 3, 25, 27]; \r\nn_fish = [11, 208, 48, 114, 59, 82, 109, 142, 173, 225, 31, 223, 203, 67, 178, 138, 92, 19, 221, 66, 52, 9, 43, 33, 26, 25, 3]; \r\n # ax*2 + bx + c, here we use a = 1.22, b = 34, c = 68.2, the equation of our line is 1.22x^2 + 34x + 68.2 \r\n y = [1.22x^2+34x+68.2]\r\n\r\n\r\nplt.plot(size,price,\"o\")\r\n\r\nplt.plot(size,y)\r\n\r\nplt.savefig(\"./static/img/matplot/temp.png\", bbox_inches='tight')\r\nplt.clf()",
        "answer": "Hello World!",
        "plotname": "L2gp2.png",
        "haveplot": true,
        "nextLocked": true
    },
    {
        "instructions": "<h3>OLS python implimentation:</h3></br><p>Now let's learn how to impliment OLS by python</p> </br><p>(this is a coding page please run the code before go to next page)</p>",
        "starterCode": "print()",
        "code": "print()",
        "answer": "Hello World!",
        "nextLocked": true
    },
    {
        "instructions": "<h3>OLS python implimentation:</h3></br><p>Now, let's predict our line of best fit</p> </br><p>(this is a coding page please run the code before go to next page)</p>",
        "starterCode": "print()",
        "code": "print()",
        "answer": "Hello World!",
        "nextLocked": true
    },
    {
        "instructions": "<h3>OLS python implimentation:</h3></br><p>Now, let's predict our line of best fit</p> </br><p>(this is a coding page please run the code before go to next page)</p>",
        "starterCode": "print()",
        "code": "print()",
        "answer": "Hello World!",
        "nextLocked": true
    },
    {
        "instructions": "<h3>Now it's your turn</h3></br><p>Let's use this algorithm to solve our fish pond problem</p></br><p>(this is a coding page please run the code before go to next page)</p>",
        "starterCode": "print()",
        "code": "print()",
        "answer": "Hello World!",
        "nextLocked": true
    },
    {
        "instructions": "<h3>Let's program the agent now and see this pond come to life!</h3></p></br><p>(this is a coding page please run the code before go to next page)</p>",
        "starterCode": "print()",
        "code": "print()",
        "answer": "Hello World!",
        "nextLocked": true
    },
    {
        "instructions": "<h3>Answer</h3></br>",
        "starterCode": "print()",
        "code": "print()",
        "answer": "Hello World!",
        "nextLocked": true
    }
]