[
    {
        "instructions": "<h1>Non Linear Regression</h1><br/><h3>Hi welcome to the non-linear regression module.</h3><br/><p>In this lesson we will see what happens when our data in not linear (as in lesson 1 on linear regression). <br/><br/>(Please click next to go to the next page.) </p>",
        "starterCode": "def hello():\r\n    print(\"Hello world!\");",
        "code": "def hello():\r\n    print(\"Hello world!\");",
        "answer": "",
        "plotname": "",
        "haveplot": false,
        "nextLocked": false
    },
    {
        "instructions": "<h1>Background</h1><br/><p>In lesson 1 you used linear regression to solve the problem because when you graphed the data you were able to see a straight line form on the graph.<br/>So what happens if our data does not form a straight line?<br/>Can you think of other shapes our data could for?<br/>Click on run to see an exemple of non linear data.<br/><br/>(Please click run before going to the next page)</p>",       
        "starterCode": "\r\nx = [2, 12, 5, 19, 6, 8, 9, 10, 11, 14, 4, 15, 16, 7, 17, 18, 20, 26, 13, 21, 22, 1, 23, 24, 3, 25, 27] \r\ny = [11, 208, 48, 114, 59, 82, 109, 142, 173, 225, 31, 223, 203, 67, 178, 138, 92, 19, 221, 66, 52, 9, 43, 33, 26, 25, 3] \r\n# As in lesson 1, let's use matplotlib to visualize our data\r\nplt.plot(x,y, \"o\")\r\n#plt.show()\r\n#plt.savefig(\"./userFolder/lessonplot/gpl2-1.png\", bbox_inches='tight')\r\nplt.savefig(\"./static/img/matplot/temp.png\", bbox_inches='tight')\r\nplt.clf()\r\n\r\n# As you can see our data forms a bell curve, we cannot find a straight line to predict our data.",
        "code": "\r\nx = [2, 12, 5, 19, 6, 8, 9, 10, 11, 14, 4, 15, 16, 7, 17, 18, 20, 26, 13, 21, 22, 1, 23, 24, 3, 25, 27] \r\ny = [11, 208, 48, 114, 59, 82, 109, 142, 173, 225, 31, 223, 203, 67, 178, 138, 92, 19, 221, 66, 52, 9, 43, 33, 26, 25, 3] \r\n# As in lesson 1, let's use matplotlib to visualize our data\r\nplt.plot(x,y, \"o\")\r\n#plt.show()\r\n#plt.savefig(\"./userFolder/lessonplot/gpl2-1.png\", bbox_inches='tight')\r\nplt.savefig(\"./static/img/matplot/temp.png\", bbox_inches='tight')\r\nplt.clf()\r\n\r\n# As you can see our data forms a bell curve, we cannot find a straight line to predict our data.",
        "answer": "",
        "plotname": "L2gp1.png",
        "haveplot": true,
        "nextLocked": false
    },
    {
        "instructions": "<h1>Background</h1><br/><p>As you can see if we were trying to draw a single straight line through our data like you learnt to do in lesson 1 it would not work. That same fact would be true for many non-linear curve, polynomials, logaritmic, exponentials, ocilating, round, all those function shaped are considered non-linear<br/><br/>In math class and in lesson 1 you learnt that the equation of a straight line is y = mx+b.<br/>So what about the equation of non linear curves?<br/><br/>(Please click next to go to the next page)</p>",       
        "starterCode": "def hello():\r\n    print(\"Hello world!\");",
        "code": "def hello():\r\n    print(\"Hello world!\");",
        "answer": "",
        "plotname": "",
        "haveplot": false,
        "nextLocked": false
    },
    {
        "instructions": "<h1>Equation of a curve - Polynomial</h1><p>2nd degree polynomial, take the form a*x^2+b*x+c and their graph looks like a bell curve as in graph we plotted a in the previous pages.<br/>If we have the equation of a second degree polynomial we can actually guess what its graph will look like.<br/><br/>In the equation a*x^2+b*x+c, a gives us informations on whether the pick of the curve will be upward or downward. If a is negative (-a), then the curve will pick upward, like a mountain. If a is posivite, the curve will pick downward (like a smile).<br/>You can know when/if the curve will cross the x-axis by performing a*x^2+b*x+c = 0, for instance if a*x^2+b*x+c = 0 for x = -2 and x = 2 then the curve will cross the x-axis at x = -2 and x = 2.<br/><br/>But how do we get this equation from points on a graph?<br/>We can actually use pandas, a data processing library to calculate that easily.<br/><br/>Let's take the values from page 2 that we used to graph our curve and determine the equation.<br/><br/>(Please click run before going to the next page)</p>",       
        "starterCode": "\r\nx = [2, 12, 5, 19, 6, 8, 9, 10, 11, 14, 4, 15, 16, 7, 17, 18, 20, 26, 13, 21, 22, 1, 23, 24, 3, 25, 27] \r\ny = [11, 208, 48, 114, 59, 82, 109, 142, 173, 225, 31, 223, 203, 67, 178, 138, 92, 19, 221, 66, 52, 9, 43, 33, 26, 25, 3]\r\nz = np.polyfit(x, y, 2)\r\n#the 2 stand for the degree of the polynomial, we could use this code to find equations of polynomials of any degrees.\r\nprint(\"Equation of curve is: %f *x^2 + %f * x + %f\"%(z[0], z[1], z[2]))",
        "code": "\r\nx = [2, 12, 5, 19, 6, 8, 9, 10, 11, 14, 4, 15, 16, 7, 17, 18, 20, 26, 13, 21, 22, 1, 23, 24, 3, 25, 27] \r\ny = [11, 208, 48, 114, 59, 82, 109, 142, 173, 225, 31, 223, 203, 67, 178, 138, 92, 19, 221, 66, 52, 9, 43, 33, 26, 25, 3]\r\nz = np.polyfit(x, y, 2)\r\n#the 2 stand for the degree of the polynomial, we could use this code to find equations of polynomials of any degrees.\r\nprint(\"Equation of curve is: %f *x^2 + %f * x + %f\"%(z[0], z[1], z[2]))",
        "answer": "",
        "plotname": "L2gp1.png",
        "haveplot": true,
        "nextLocked": false
    },
    {
        "instructions": "<h1>Equation of a curve - Generalization</h1><p>In the previous page you learnt to find the equation of any polynomial of any degree.<br/>However, not every curve is a polynomial, it could be an exponential, a logarithmic or many many more types of curves.<br/><br/>Depeding on the complexity of your curve their might not be an easy way to find its equation.<br/><br/>Complex curve equations are out of scope for this lesson but we've added some link to further readings if you ever encounter them:<br/>Exponential curves - <a href=\"https://swharden.com/blog/2020-09-24-python-exponential-fit/\" style=\"color:blue\">Exponential Curve Fit with scipy</a><br/>Logarithmic Curves - <a href=\"https://stats.stackexchange.com/questions/190107/curve-fit-with-logarithmic-regression-in-python\" style=\"color:blue\">Logarithmic Curve fit and Regression</a><br/>Oscillating Curves - <a href=\"http://scipy-lectures.org/intro/scipy/auto_examples/plot_curve_fit.html\" style=\"color:blue\">sin(x) curve fitting</a><br/>Gaussian and Lorentzian Curves - <a href=\"http://emilygraceripka.com/blog/16\" style=\"color:blue\">Curve Fitting for Gaussian and Lorentzian</a><br/><br/>Please click next to go to the next page</p>",       
        "starterCode": "def hello():\r\n    print(\"Hello world!\");",
        "code": "def hello():\r\n    print(\"Hello world!\");",
        "answer": "",
        "plotname": "L2gp1.png",
        "haveplot": false,
        "nextLocked": false
    },
    {
        "instructions": "<h1>Non linear regression</h1><p>Now that we've found the equation of our curve we should be able to take any x and find a corresponding y. <br/><br/>To do that you can simply replace the x in your a*x^2+b*x+c why any value of x you want and you will find it's y.<br/> There is more to implementing non-linear regression in Python but the coded implentation is out of scope for this lesson.<br/>However, you should now have strong basis to understand how to find equations of curves, graph them and use them by replacing x in your equation, which is the base of any non-linear regression algorithm<br/><br/><h3>Congratulations! You have finished this module!</h3>",       
        "starterCode": "def hello():\r\n    print(\"Hello world!\");",
        "code": "def hello():\r\n    print(\"Hello world!\");",
        "answer": "",
        "plotname": "",
        "haveplot": false,
        "nextLocked": true
    }
]
